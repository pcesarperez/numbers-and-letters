/*
 * build.gradle
 *
 * Building script for 'numbers-and-letter` library.
 */

defaultTasks 'createAssemblies'


apply plugin: 'java'
apply plugin: 'antlr'
apply plugin: 'maven-publish'
apply plugin: 'idea'


sourceSets {
    debug {
        java {
            srcDirs = ["src/main/java", new File (buildDir, 'generated-src/antlr/main')]
            outputDir = new File (buildDir, "debug/classes/java/main")
        }

        resources {
            srcDirs = ["src/main/resources"]
        }
    }

    release {
        java {
            srcDirs = ["src/main/java", new File (buildDir, 'generated-src/antlr/main')]
            outputDir = new File (buildDir, "release/classes/java/main")
        }

        resources {
            srcDirs = ["src/main/resources"]
        }
    }

    main.java.outputDir = new File (buildDir, "classes/java/main")
    test.java.outputDir = new File (buildDir, "classes/java/test")
}


// IntelliJ Idea needs the generated sources folder explicitly declared.
// https://discuss.gradle.org/t/how-do-i-get-intellij-to-recognize-gradle-generated-sources-dir/16847/4
idea {
    module {
        generatedSourceDirs += file ('build/generated-src')
    }
}


// External properties.
Properties properties = new Properties ( )
properties.load (new FileInputStream ('build.properties'))


// Maven coordinates.
group = properties.assemblyGroup
version = properties.assemblyVersion


// MANIFEST.MF information.
ext.sharedManifest = manifest {
    attributes (
        'Specification-Title': properties.specificationTitle,
        'Specification-Version': properties.specificationVersion,
        'Specification-Vendor': properties.specificationVendor,
        'Implementation-Title': properties.implementationTitle,
        'Implementation-Version': properties.implementationVersion,
        'Implementation-Vendor': properties.implementationVendor,
        'Class-Path': properties.classPath
    )
}


// We are using both Maven central and the local Maven repo.
repositories {
    mavenCentral ( )
    mavenLocal ( )
}


// Use `gradle publishToMavenLocal` to upload the assembly to the local Maven repository.
publishing {
    publications {
        mavenJava (MavenPublication) {
            from components.java
        }
    }
}


// Compiler settings.
sourceCompatibility = properties.sourceCompatibility
targetCompatibility = properties.targetCompatibility


generateGrammarSource {
    doFirst ( ) {
        println "Generating source code from grammar files..."
    }

    arguments += ['-package', 'com.adastrafork.numbersandletters.generated.antlr4']
    arguments += ['-visitor', '-no-listener']
    outputDirectory = new File (buildDir, properties.generatedSourcesDir.toString ( ))
}


clean {
    delete "generated-src"
}


dependencies {
    antlr "org.antlr:antlr4:4.5.3"
    runtime "org.antlr:antlr4-runtime:4.5.3"
    testImplementation ('org.junit.jupiter:junit-jupiter-api:5.1.0')
    testRuntimeOnly ('org.junit.jupiter:junit-jupiter-engine:5.1.0')
}


test {
    useJUnitPlatform ( )
}


task info {
    info.description = 'Shows assembly information.'

    doFirst ( ) {
        println ''
        println '\t|Assembly info:'
        println '\t|'
        println '\t|\tgroupId: ' + properties.assemblyGroup
        println '\t|\tartifactId: ' + properties.assemblyName
        println '\t|\tversion: ' + properties.assemblyVersion
    }
}


task compileDebug (type: JavaCompile, dependsOn: ['clean', 'generateGrammarSource']) {
    doFirst ( ) {
        println "Compiling debug code..."
    }

    source = sourceSets.debug.java.srcDirs
    destinationDir = sourceSets.debug.java.outputDir
    classpath = project.sourceSets.main.compileClasspath

    options.fork = properties.compilerFork.toBoolean ( )
    options.incremental = properties.incrementalBuild.toBoolean ( )
    options.encoding = properties.sourceEncoding
    options.verbose = properties.verboseBuild.toBoolean ( )
    options.debug = true
    options.debugOptions.debugLevel = 'source,lines,vars'
}


task compileRelease (type: JavaCompile, dependsOn: ['clean', 'generateGrammarSource']) {
    doFirst ( ) {
        println "Compiling release code..."
    }

    source = sourceSets.release.java.srcDirs
    destinationDir = sourceSets.release.java.outputDir
    classpath = project.sourceSets.main.compileClasspath

    options.fork = properties.compilerFork.toBoolean ( )
    options.incremental = properties.incrementalBuild.toBoolean ( )
    options.encoding = properties.sourceEncoding
    options.verbose = properties.verboseBuild.toBoolean ( )
    options.debug = false
}


task createAssemblies (dependsOn: ['createAssemblyDebug', 'createAssemblyRelease'])


task createAssemblyDebug (type: Jar, dependsOn: 'compileDebug') {
    doFirst ( ) {
        println 'Creating assembly for development/acceptance environments...'
    }

    from sourceSets.debug.java.outputDir
    destinationDir = file (properties.jarDebugDir)
    baseName = properties.assemblyName
    version = properties.assemblyVersion

    manifest = project.manifest {
        from sharedManifest
    }
}


task createAssemblyRelease (type: Jar, dependsOn: 'compileRelease') {
    doFirst ( ) {
        println 'Creting assembly for production environments...'
    }

    from sourceSets.release.java.outputDir
    destinationDir = file (properties.jarReleaseDir)
    baseName = properties.assemblyName
    version = properties.assemblyVersion

    manifest = project.manifest {
        from sharedManifest
    }
}